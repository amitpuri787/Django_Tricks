{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 .SFNSDisplay-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 .SFNSText-Bold;
\f3\fnil\fcharset0 HelveticaNeue-Bold;\f4\fnil\fcharset0 .SFNSText;\f5\froman\fcharset0 Times-Bold;
\f6\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red0\green0\blue0;
\red204\green175\blue175;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c83922\c74118\c74118\c29804;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid101\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh14980\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\b\fs42 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 To get all records from model\

\f1\b0 \ulnone \
>> queryset = Student.objects.all()\
\

\f0\b \ul Add record in Model\

\f1\b0 \ulnone \
>> 	queryset = \cf2 \cb3 \outl0\strokewidth0 Student.objects.create()\
	queryset.save()\
\

\f2\b\fs38 \cf2 \cb3 \ul \ulc2 \outl0\strokewidth0 \strokec2 Suppose, we need a specific object from a queryset to matching the result\

\f1\b0 \ulnone >>	
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.filter(id=5)\
\

\f3\b \ul Suppose, 
\f2\fs36 \cf2 \cb3 \ulc2 \outl0\strokewidth0 \strokec2 we need to select the subset of complete set of objects :\

\f1\b0 \ulnone >> 	
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.filter(first_name_startwith=\'93R\'94)\
\

\f3\b \ul To 
\f2\fs40 \cf2 \cb3 \ulc2 \outl0\strokewidth0 \strokec2 returns a new\'a0
\f1 QuerySet
\f2 \'a0containing objects that do not match the given lookup parameter:\

\f1\b0 \ulnone >>	
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.exclude(first_name_startwith=\'93R\'94)\
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\b\fs40 \cf2 \cb3 \ul \ulc2 OR operation
\f1\b0\fs42 \cf2 \cb3 \ulnone \
\pard\pardeftab720\sl360\partightenfactor0

\f4\fs40 \cf2 \cb3 \outl0\strokewidth0 \strokec2 The OR operation is performed when we need the record filtering with two or more conditions. In the below example, we will get the student whose\'a0first_name\'a0starts with 'A' and\'a0last_name\'a0starts with 'M'.
\f1 \
\
\pard\pardeftab720\sl360\sa320\qj\partightenfactor0
\cf2 Django allows us to do this in two ways.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\qj\partightenfactor0
\ls1\ilvl0
\b \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 queryset_1 |queryset_2
\b0 \cb1 \
\ls1\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 filter(Q(<condition_1>) | Q(<condition_2>
\b0 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 \
>>	
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.filter(first_name_startwith=\'93A\'94) | Student.objects.filter(last_name_startwith=\'93M\'94)\
\
	
\fs32 \cf4 \cb5 \outl0\strokewidth0 \strokec4 <QuerySet\'a0[<Student:\'a0Ritesh\'a0Tiwari>,\'a0<Student:\'a0Yash\'a0Sharma>,\'a0<Student:\'a0Arpita\'a0Sharma>,\'a0<Student:\'a0Prince\'a0Sharma>,\'a0<Student:\'a0Rahul\'a0Shakya>]>\'a0\'a0\cb1 \
\
\pard\pardeftab720\sl360\sa320\qj\partightenfactor0

\f3\b\fs40 \cf2 \cb3 \ul \ulc2 \outl0\strokewidth0 AND operation
\f1\b0\fs32 \cf4 \cb1 \ulc4 \outl0\strokewidth0 \strokec4 \

\fs40 \cf2 \cb3 \ulnone \strokec2 The AND operation is performed when we need the record matching with two or more conditions. In the below example, we will get the student whose\'a0
\b first_name
\b0 \'a0starts with\'a0
\b 'P'
\b0 \'a0and\'a0
\b last_name
\b0 \'a0starts with\'a0
\b 'S'.
\b0 \
\pard\pardeftab720\sl360\sa320\qj\partightenfactor0
\cf2 Django allows us to do this in three ways.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\qj\partightenfactor0
\ls2\ilvl0
\b \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 queryset_1 & queryset_2
\b0 \cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 filter(<condition_1>, <condition_2>)
\b0 \cb1 \
\ls2\ilvl0
\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 filter(Q(condition_1) & Q(condition_2))
\b0 \cb1 \
\pard\tx566\pardeftab720\sl500\qj\partightenfactor0
\cf4 \
>>	 
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.filter(first_name_startwith=\'93A\'94) & Student.objects.filter(last_name_startwith=\'93M\'94)\
\pard\tx566\pardeftab720\sl500\qj\partightenfactor0

\fs40 \cf4 \cb1 >>	 
\fs42 \cf2 \cb3 queryset = Student.objects.filter(first_name_startwith=\'93A\'94, last_name_startwith=\'93M\'94)
\fs40 \
\pard\tx566\pardeftab720\sl500\qj\partightenfactor0
\cf2 \cb3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500\qj\partightenfactor0
\ls3\ilvl0
\fs32 \cf4 \cb5 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <QuerySet\'a0[<Student:\'a0Prince\'a0Sharma>]>\'a0\'a0\
\pard\tx566\pardeftab720\sl500\qj\partightenfactor0
\cf4 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0

\f3\b\fs42 \cf2 \cb3 \ul \ulc2 \outl0\strokewidth0 create multiple objects in one shot
\f1\b0\fs32 \cf4 \cb1 \ulnone \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0

\fs42 \cf2 \cb3 \strokec2 Sometimes we want create multiple objects in one shot.\'a0
\fs32 \cf4 \cb1 \strokec4 \
>>	
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.bulk([Student(1,\'94Amit\'94,\'94PU\'94),Student(1,\'94Santosh\'94,\'94Du\'94),Student(1,\'94Kapil\'94,\'94HPU\'94)])\
\

\f0\b\fs46 \cf2 \cb3 \ul \ulc2 \outl0\strokewidth0 \strokec2 We can set the limit on the queryset
\f1\b0 \ulnone  using the Python\'a0
\f3\b list's slicing
\f1\b0 \'a0syntax. This is equivalent operation of SQL's\'a0
\f3\b LIMIT
\f1\b0 \'a0and\'a0
\f3\b OFFSET
\f1\b0 \'a0clauses. Let's see the following query.
\fs32 \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0

\fs42 \cf2 \cb3 \outl0\strokewidth0 >> queryset = Student.objects.all()[:5]\
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf4 \cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0

\fs42 \cf2 \cb3 \outl0\strokewidth0 >> queryset = Student.objects.all()[2:7]\
\
>> queryset = Student.objects.all()[2:7:2]\
\

\f3\b \ul Order BY
\f1\b0 \ulnone \
\pard\pardeftab720\sl360\partightenfactor0

\fs46 \cf2 \cb3 \outl0\strokewidth0 \strokec2 Django provides the\'a0
\f3\b order_by
\f1\b0 \'a0method for ordering the\'a0
\f3\b queryset.
\f1\b0 \'a0This method takes the\'a0
\f3\b field name
\f1\b0 \'a0which we want to Order (ascending and descending) the result. Let's see the following example.
\fs32 \cf4 \cb1 \strokec4 \
\
>>	
\fs42 \cf2 \cb3 \outl0\strokewidth0 queryset = Student.objects.all().order_by(\'91Name\'92)\
\

\fs40 \cf2 \cb3 \outl0\strokewidth0 \strokec2 Django ORM provides the grouping facility using the aggregation functions like\'a0
\b Max,
\b0 \'a0
\b Min,
\b0 \'a0
\b Avg,
\b0 \'a0and\'a0
\b Sum
\b0 . Sometimes we need to get the aggregate values from the objects. Let's understand the following example.
\fs32 \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \outl0\strokewidth0 >>	
\fs42 \cf2 \cb3 queryset = Student.objects.all().aggregate(Avg(\'91Id\'92))\
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf4 \cb1 >>	
\fs42 \cf2 \cb3 queryset = Student.objects.all().aggregate(Max(\'91Id\'92))\

\fs32 \cf4 \cb1 >>	
\fs42 \cf2 \cb3 queryset = Student.objects.all().aggregate(Min(\'91Id\'92))\

\fs32 \cf4 \cb1 >>	
\fs42 \cf2 \cb3 queryset = Student.objects.all().aggregate(Sum(\'91Id\'92))\
\pard\pardeftab720\sl360\partightenfactor0

\fs32 \cf4 \cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0

\f3\b\fs44 \cf2 \cb3 \ul \ulc2 \outl0\strokewidth0 Truncate in SQL
\f1\b0\fs32 \cf4 \cb1 \ulnone \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0

\fs44 \cf2 \cb3 \strokec2 Truncate in SQL means clear the table data for future use. Django doesn't provide the built-in methods to truncate the table, but we can use the\'a0
\f3\b delete()
\f1\b0 \'a0method to get the similar result. Let's understand the following example.
\fs32 \cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\sl360\partightenfactor0

\fs42 \cf2 \cb3 \outl0\strokewidth0 >>	queryset = Student.objects.all().delete()
\fs32 \cf4 \cb1 \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f5\b\fs44 \cf4 \ul \ulc4 \outl0\strokewidth0 Union
\f1\b0\fs32 \cf4 \ulnone \outl0\strokewidth0 \strokec4 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\f6\fs44 \cf4 Union means getting the record which are common in both query sets. Let's see how we can do this.
\f1\fs32 \
\pard\pardeftab720\sl360\partightenfactor0

\fs42 \cf2 \cb3 \outl0\strokewidth0 >>	q1 = Student.objects.filter(id=15)\
>>	q2 = Student.objects.filter(name=\'93AMit\'94)
\fs32 \cf4 \cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \

\fs56 q1.join(q2)\
\

\fs32 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \outl0\strokewidth0 \strokec4 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}