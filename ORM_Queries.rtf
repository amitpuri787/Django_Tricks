To get all records from model

>> queryset = Student.objects.all()

Add record in Model

>> 	queryset = Student.objects.create()
	queryset.save()

Suppose, we need a specific object from a queryset to matching the result
>>	queryset = Student.objects.filter(id=5)

Suppose, we need to select the subset of complete set of objects :
>> 	queryset = Student.objects.filter(first_name_startwith=“R”)

To returns a new QuerySet containing objects that do not match the given lookup parameter:
>>	queryset = Student.objects.exclude(first_name_startwith=“R”)

OR operation
The OR operation is performed when we need the record filtering with two or more conditions. In the below example, we will get the student whose first_name starts with 'A' and last_name starts with 'M'.

Django allows us to do this in two ways.
	◦	queryset_1 |queryset_2
	◦	filter(Q(<condition_1>) | Q(<condition_2>

>>	queryset = Student.objects.filter(first_name_startwith=“A”) | Student.objects.filter(last_name_startwith=“M”)

	<QuerySet [<Student: Ritesh Tiwari>, <Student: Yash Sharma>, <Student: Arpita Sharma>, <Student: Prince Sharma>, <Student: Rahul Shakya>]>  

AND operation
The AND operation is performed when we need the record matching with two or more conditions. In the below example, we will get the student whose first_name starts with 'P' and last_name starts with 'S'.
Django allows us to do this in three ways.
	◦	queryset_1 & queryset_2
	◦	filter(<condition_1>, <condition_2>)
	◦	filter(Q(condition_1) & Q(condition_2))

>>	 queryset = Student.objects.filter(first_name_startwith=“A”) & Student.objects.filter(last_name_startwith=“M”)
>>	 queryset = Student.objects.filter(first_name_startwith=“A”, last_name_startwith=“M”)

	1.	<QuerySet [<Student: Prince Sharma>]>  

create multiple objects in one shot
Sometimes we want create multiple objects in one shot. 
>>	queryset = Student.objects.bulk([Student(1,”Amit”,”PU”),Student(1,”Santosh”,”Du”),Student(1,”Kapil”,”HPU”)])

We can set the limit on the queryset using the Python list's slicing syntax. This is equivalent operation of SQL's LIMIT and OFFSET clauses. Let's see the following query.

>> queryset = Student.objects.all()[:5]

>> queryset = Student.objects.all()[2:7]

>> queryset = Student.objects.all()[2:7:2]

Order BY
Django provides the order_by method for ordering the queryset. This method takes the field name which we want to Order (ascending and descending) the result. Let's see the following example.

>>	queryset = Student.objects.all().order_by(‘Name’)

Django ORM provides the grouping facility using the aggregation functions like Max, Min, Avg, and Sum. Sometimes we need to get the aggregate values from the objects. Let's understand the following example.

>>	queryset = Student.objects.all().aggregate(Avg(‘Id’))
>>	queryset = Student.objects.all().aggregate(Max(‘Id’))
>>	queryset = Student.objects.all().aggregate(Min(‘Id’))
>>	queryset = Student.objects.all().aggregate(Sum(‘Id’))

Truncate in SQL
Truncate in SQL means clear the table data for future use. Django doesn't provide the built-in methods to truncate the table, but we can use the delete() method to get the similar result. Let's understand the following example.

>>	queryset = Student.objects.all().delete()

Union
Union means getting the record which are common in both query sets. Let's see how we can do this.
>>	q1 = Student.objects.filter(id=15)
>>	q2 = Student.objects.filter(name=“AMit”)

q1.join(q2)



















